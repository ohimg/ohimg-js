name: Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  node-test:
    name: Node.js Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x, 20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - run: npm ci
      - run: npm run build
      - run: npm test

  deno-test:
    name: Deno Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Create Deno test file
        run: |
          cat > test.deno.ts << 'EOF'
          import { assertEquals } from "https://deno.land/std/testing/asserts.ts";
          import { OhImg } from "./src/index.ts";

          Deno.test("OhImg Deno environment", async () => {
            const ohimg = new OhImg({
              apiKey: "og_live_test",
              webhookSecret: "og_whsec_test"
            });

            const url = await ohimg.getImageUrl({
              path: "/test",
              domain: "https://example.com"
            });

            assertEquals(typeof url, "string");
            assertEquals(url.startsWith("https://og.ohimg.dev"), true);
          });
          EOF

      - name: Run Deno tests
        run: deno test --allow-net test.deno.ts

  browser-test:
    name: Browser Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"

      - run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Create browser test
        run: |
          cat > test.browser.ts << 'EOF'
          import { test, expect } from '@playwright/test';

          test('OhImg works in browser environment', async ({ page }) => {
            await page.goto('about:blank');
            
            const result = await page.evaluate(async () => {
              const { OhImg } = await import('./src/index.ts');
              
              const ohimg = new OhImg({
                apiKey: 'og_live_test',
                webhookSecret: 'og_whsec_test'
              });
              
              return ohimg.getImageUrl({
                path: '/test',
                domain: 'https://example.com'
              });
            });
            
            expect(typeof result).toBe('string');
            expect(result.startsWith('https://og.ohimg.dev')).toBeTruthy();
          });
          EOF

      - name: Create Playwright config
        run: |
          cat > playwright.config.ts << 'EOF'
          import { PlaywrightTestConfig } from '@playwright/test';

          const config: PlaywrightTestConfig = {
            testDir: './',
            testMatch: 'test.browser.ts',
            use: {
              browserName: 'chromium',
            },
          };
          export default config;
          EOF

      - run: npx playwright test

  cloudflare-test:
    name: Cloudflare Workers Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"

      - run: npm ci
      - run: npm install -D wrangler@latest

      - name: Create Worker test
        run: |
          cat > worker.test.ts << 'EOF'
          import { OhImg } from "./src/index.ts";

          export default {
            async fetch(request: Request): Promise<Response> {
              try {
                const ohimg = new OhImg({
                  apiKey: "og_live_test",
                  webhookSecret: "og_whsec_test"
                });

                const url = await ohimg.getImageUrl({
                  path: "/test",
                  domain: "https://example.com"
                });

                return new Response(url, {
                  headers: { "Content-Type": "text/plain" }
                });
              } catch (error) {
                return new Response(error.message, { status: 500 });
              }
            }
          };
          EOF

      - name: Create Wrangler config
        run: |
          cat > wrangler.toml << 'EOF'
          name = "ohimg-test"
          main = "worker.test.ts"
          compatibility_date = "2024-01-01"
          EOF

      - name: Test in Wrangler
        run: npx wrangler dev worker.test.ts --test

  publish:
    name: Publish to npm
    needs: [node-test, deno-test, browser-test, cloudflare-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          registry-url: "https://registry.npmjs.org"

      - run: npm ci
      - run: npm run build

      # - name: Publish to npm
      #   run: npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
